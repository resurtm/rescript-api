// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Uuid = require("uuid");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Movies = require("./Movies.bs.js");
var Express = require("bs-express/src/Express.bs.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Process = require("process");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var BodyParser = require("body-parser");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var app = Express.express(undefined);

Express.App.use(app, BodyParser.json());

Express.App.get(app, "/", Express.Middleware.from(function (param, param$1) {
          console.log(Movies.mockedActors);
          console.log(Movies.mockedMovies);
          var json = {};
          json["success"] = true;
          return function (param) {
            return Express.$$Response.sendJson(json, param);
          };
        }));

Express.App.get(app, "/movie", Express.Middleware.from(function (param, param$1) {
          var partial_arg = Movies.mockedMovies.contents.map(function (movie) {
                var json = {};
                json["id"] = movie.id;
                json["title"] = movie.title;
                return json;
              });
          return function (param) {
            return Express.$$Response.sendJson(partial_arg, param);
          };
        }));

function parseJsonMovie(rawJson) {
  var result = Js_json.decodeObject(rawJson);
  if (result === undefined) {
    return ;
  }
  var result$1 = Caml_option.valFromOption(result);
  var movie_id = Uuid.v4();
  var movie_title = Movies.parseJsonStringKey(result$1, "title");
  var movie_year = Movies.parseJsonNumberKey(result$1, "year");
  var movie_actors = [];
  var movie = {
    id: movie_id,
    title: movie_title,
    year: movie_year,
    actors: movie_actors
  };
  if (movie_title === "" || movie_year === 0) {
    return ;
  } else {
    Movies.mockedMovies.contents = [movie].concat(Movies.mockedMovies.contents);
    return movie;
  }
}

Express.App.post(app, "/movie", Express.Middleware.from(function (param, req) {
          var bodyText = Express.$$Request.bodyJSON(req);
          if (bodyText === undefined) {
            return function (param) {
              return Express.$$Response.sendString("nothing created", param);
            };
          }
          var movie = parseJsonMovie(Caml_option.valFromOption(bodyText));
          if (movie === undefined) {
            return function (param) {
              return Express.$$Response.sendString("nothing created", param);
            };
          }
          var partial_arg = "movie created with id " + movie.id;
          return function (param) {
            return Express.$$Response.sendString(partial_arg, param);
          };
        }));

function onListen(e) {
  var val;
  try {
    val = e;
  }
  catch (raw_e){
    var e$1 = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e$1.RE_EXN_ID === Js_exn.$$Error) {
      console.log(e$1._1);
      return Process.exit(1);
    }
    throw e$1;
  }
  console.log("Listening at http://127.0.0.1:3000");
  
}

var server = Express.App.listen(app, 3000, undefined, onListen, undefined);

exports.app = app;
exports.parseJsonMovie = parseJsonMovie;
exports.onListen = onListen;
exports.server = server;
/* app Not a pure module */
