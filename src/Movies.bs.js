// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var mockedActors = {
  contents: [
    {
      id: "200201",
      firstName: "Ryan",
      lastName: "Gosling",
      birthYear: 1980
    },
    {
      id: "200202",
      firstName: "Harrison",
      lastName: "Ford",
      birthYear: 1960
    },
    {
      id: "200203",
      firstName: "Carey",
      lastName: "Mulligan",
      birthYear: 1980
    }
  ]
};

var mockedMovies = {
  contents: [
    {
      id: "100100",
      title: "Blade Runner",
      year: 2018,
      actors: [
        Caml_array.get(mockedActors.contents, 0),
        Caml_array.get(mockedActors.contents, 1)
      ]
    },
    {
      id: "100101",
      title: "Drive",
      year: 2011,
      actors: [
        Caml_array.get(mockedActors.contents, 1),
        Caml_array.get(mockedActors.contents, 2)
      ]
    }
  ]
};

function parseJsonStringKey(rawJson, keyName) {
  var value = Js_dict.get(rawJson, keyName);
  if (value === undefined) {
    return "";
  }
  var value$1 = Js_json.decodeString(Caml_option.valFromOption(value));
  if (value$1 !== undefined) {
    return value$1;
  } else {
    return "";
  }
}

function parseJsonNumberKey(rawJson, keyName) {
  var value = Js_dict.get(rawJson, keyName);
  if (value === undefined) {
    return 0;
  }
  var value$1 = Js_json.decodeNumber(Caml_option.valFromOption(value));
  if (value$1 !== undefined) {
    return value$1 | 0;
  } else {
    return 0;
  }
}

exports.mockedActors = mockedActors;
exports.mockedMovies = mockedMovies;
exports.parseJsonStringKey = parseJsonStringKey;
exports.parseJsonNumberKey = parseJsonNumberKey;
/* No side effect */
